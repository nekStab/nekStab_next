#!/bin/bash
set -a  # export all variables and functions defined in the script

# Compiler and architecture settings
FC="mpif90" # default (changed from mpif77)
CC="mpicc" # default 
FFLAGS="" # fortran flags
CFLAGS="" # c flags
FFLAGS_KRYLOV="" # fortran flags for LightKrylov
USR_LFLAGS="" # linking flags
ar="" # architecture specific 

# Fetch version information to print in the initialisation message
N_VERSION=$(git -C $NEK_SOURCE_ROOT describe --tag --long --always)
NS_VERSION=$(git -C $NEKSTAB_SOURCE_ROOT describe --tag --long --always)

#-------------------------------------------------------------------------------
# Compiler Detection
#-------------------------------------------------------------------------------
if command -v mpiifort >/dev/null 2>&1; then
    echo "Compiler found: $(mpiifort -v)"

    FC="mpiifort"
    CC="mpiicc"
    FFLAGS+=" -fixed -extend-source" # Enables long lines.
    FFLAGS_KRYLOV+=" -O3 -no-prec-div -fp-model fast=2 -xHost -g -traceback"
    if command -v mpiifx >/dev/null 2>&1; then
        echo "Using LLVM version of Intel compiler..."
        FC="mpiifx"
        CC="mpiicx"
        CFLAGS+=" -w -Wno-unused-command-line-argument"
        FFLAGS+=" -w -xHost -qmkl" # Suppresses all warning messages (otherwise will not compile nek5000)
        FFLAGS_KRYLOV+=" -qmkl"
    else
        echo "LLVM not found, using classic."
        USR_LFLAGS+=" -qmkl"
        FFLAGS_KRYLOV+=" -ipo -qmkl"
        #FFLAGS+=" -ipo -O3 -no-prec-div -fp-model fast=2"
    fi

    FFLAGS+=" -g -traceback" # Enables debugging information.
    FLAGS+=" -fanalyser" # Enable the Clang Static Analyzer for code analysis

    USR_LFLAGS+=" -I${MKLROOT}/include -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl"
else
    echo "Compiler found: $(mpif90 --version | head -n1)"
    FFLAGS+=" -ffixed-form" # Enables fixed-form source code, necessary as we mix .f90 files.
    FFLAGS+=" -ffixed-line-length-none" # Allows for any line length in fixed-form source code.
    FFLAGS+=" -march=native" # Enables all instruction subsets supported by the local machine.
    FFLAGS+=" -g" # Enables debugging information.
    FFLAGS+=" -fbacktrace" # Provides a backtrace in case of errors, useful for debugging.
    FFLAGS+=" -fanalyzer" # Enable the Clang Static Analyzer for code analysis
    FFLAGS+=" -Ofast" # Enable aggressive optimization level for maximum performance
    FFLAGS+=" -ffast-math" # Enable fast math optimizations for floating-point operations
    FFLAGS+=" -funsafe-math-optimizations" # Enable unsafe math optimizations for improved performance

    # comment Nek5000/core/makenek.inc:226 with : sed -i '226s/^/#/' $HOME/nextStab/Nek5000/core/makenek.inc
    #FFLAGS+=" -std=legacy -w" # Provides a backtrace in case of errors, useful for debugging.
    #FFLAGS+=" -std=legacy -Wall" # Provides a backtrace in case of errors, useful for debugging.

    FFLAGS_KRYLOV+=" -O3 -march=native -funroll-loops -ffast-math -g -fbacktrace"
fi
#-------------------------------------------------------------------------------
# Architecture Detection
#-------------------------------------------------------------------------------
case $(uname -s) in
    Darwin)
        case $(uname -p) in
            x86_64) ar="x86_64" ;;
            arm)    ar="arm"; FFLAGS+=" -mcmodel=small" ;; # not compatile with mcmodel=large
        esac
        ;;
    Linux)
        case $(uname -p) in
            x86_64) ar="x86_64"; FFLAGS+=" -mcmodel=large" ;;
            arm)    ar="arm" ;;
        esac
        ;;
esac
#-------------------------------------------------------------------------------
# Linking with LAPACK and BLAS
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------

LIBRARY_NAME="libopenblas.dylib"
COMMON_PATHS=("/usr/local/opt/openblas/lib" "/usr/lib" "/usr/local/lib")
if [ "$FC" = "mpif90" ]; then
   echo "Searching for $LIBRARY_NAME in common paths..."
   for path in "${COMMON_PATHS[@]}"; do
      if [ -f "$path/$LIBRARY_NAME" ]; then
         OPENBLAS_PATH="$path/$LIBRARY_NAME"
         break
      fi
   done
   if [ -n "$OPENBLAS_PATH" ]; then
      echo "OpenBLAS found at $OPENBLAS_PATH. Using it:"
      OPENBLAS_DIR=$(dirname $OPENBLAS_PATH)
      export USR_LFLAGS+=" -lopenblas"
      echo "Adding -L$OPENBLAS_DIR to USR_LFLAGS"
      export USR_LFLAGS+=" -L$OPENBLAS_DIR"
      echo "Adding -I$OPENBLAS_DIR/include to FFLAGS"
      export FFLAGS+=" -I$OPENBLAS_DIR/include"
   else
      echo "$LIBRARY_NAME not found. Using LAPACK and BLAS instead:"
      export USR_LFLAGS+=" -llapack -lblas"
   fi
fi
#-------------------------------------------------------------------------------
# Linking with LightKrylov library
#-------------------------------------------------------------------------------
# Default values for options
KRYLOV_OPTION=false
CLEAN_OPTION=false

# Parse command-line options
while (( "$#" )); do
   case "$1" in
      --krylov)
         KRYLOV_OPTION=true
         shift
         ;;
      --clean)
         CLEAN_OPTION=true
         shift
         ;;
      *)
         # If the argument is not a known option, just shift it away
         shift
         ;;
   esac
done

# If KRYLOV_OPTION is true, install the library
if $KRYLOV_OPTION; then
      echo "libLightKrylov.a not found. Installing..."
      PREVIOUS_DIR=$(pwd)
      cd $NEKSTAB_SOURCE_ROOT/LightKrylov
      { 
         echo "Compiler for LightKrylov: $FC"
         echo "Flags for LightKrylov: $FFLAGS_KRYLOV"
         
         # If CLEAN_OPTION is true, clean the build
         if $CLEAN_OPTION; then
               fpm clean
         fi
         
         fpm test --compiler="$FC" --flag="$FFLAGS_KRYLOV"
         fpm install --compiler="$FC" --flag="$FFLAGS_KRYLOV"
      } #2>&1 krylov.log
      cd $PREVIOUS_DIR
fi
echo "Adding -L$HOME/.local/lib to USR_LFLAGS"
export USR_LFLAGS+=" -L$HOME/.local/lib"
echo "Adding -I$HOME/.local/include to FFLAGS"
export FFLAGS+=" -I$HOME/.local/include"

echo "Adding -lLightKrylov to USR_LFLAGS"
export USR_LFLAGS+=" -lLightKrylov"

#-------------------------------------------------------------------------------
echo "Setting linker to $FC"
LD="$FC" # linker ! 
export LD
#-------------------------------------------------------------------------------
# Final Preparations
#-------------------------------------------------------------------------------
FFLAGS+=" -DNVERSION=\"'${N_VERSION}'\" -DNSVERSION=\"'${NS_VERSION}'\""
export FFLAGS

# User-specified object files
USR="krylov_subspace.o"
USR+=" nek_vectors.o"
USR+=" linear_operators.o"
USR+=" matvec.o"
USR+=" krylov_decomposition.o"
USR+=" eigensolvers.o"
USR+=" lapack_wrapper.o"
USR+=" fixedp.o"
USR+=" utils.o"
USR+=" linear_stab.o"
USR+=" main.o"
USR+=" forcing.o"
USR+=" IO.o"
USR+=" postproc.o"
USR+=" newton_krylov.o"
USR+=" sensitivity.o"
# Check if the makefile_usr file exists and source it
if [ -f "makefile_usr" ]; then
    source makefile_usr
fi
export USR

# Output summary of settings
echo "Nek5000 version: $N_VERSION"
echo "nekStab version: $NS_VERSION"
echo "preparing compilation with: $(which $FC; echo $FFLAGS $USR_LFLAGS)"

# Update makefile and static variables
cp -v $NEKSTAB_SOURCE_ROOT/core/NEKSTAB NEKSTAB.inc

FILE="SIZE"
INCLUDE_LINE="include 'NEKSTAB.inc'"          # respect spaces
grep -q "^ *$INCLUDE_LINE" "$FILE" || echo -e "\n      $INCLUDE_LINE" >> "$FILE"

# Define the file and the include line
FILE="makefile_usr.inc"
INCLUDE_LINE="include $NEKSTAB_SOURCE_ROOT/core/makefile_nekStab"
# Check if the file exists
if [ -f "$FILE" ]; then
   # Check if an include line for makefile_nekStab is in the file
   if grep -q "^include .*makefile_nekStab" "$FILE"; then
      # The include line is in the file, replace it
      sed -i "" "s|^include .*makefile_nekStab|$INCLUDE_LINE|" "$FILE"
   else
      # The include line is not in the file, append it
      echo -e "\n$INCLUDE_LINE" >> "$FILE"
   fi
else
   # The file does not exist, create it with the include line
   echo "$INCLUDE_LINE" > "$FILE"
fi

set +a -e
$NEK_SOURCE_ROOT/bin/nekconfig $@
if [[ $1 != "clean" ]]; then
 $NEK_SOURCE_ROOT/bin/nekconfig -build-dep
 set -o pipefail
 touch $1.usr 
 make -j4 2>&1 | tee -a build.log
 set +o pipefail
fi

if [ $(ls *.mod 2> /dev/null | wc -l) -gt 0 ]; then
   mv *.mod obj
fi
if [ $(ls *.smod 2> /dev/null | wc -l) -gt 0 ]; then
   mv *.smod obj
fi
